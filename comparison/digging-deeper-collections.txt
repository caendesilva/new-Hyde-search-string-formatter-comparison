 File-based Collections 
 
 info This article covers advanced usage intended for those who are writing their own Blade views, and is not required as Hyde comes pre-packaged with many templates for you to use. 
 
 Introduction to Hyde Data Collections 
 Hyde provides  DataCollections , a subset of  Laravel Collections  giving you a similar developer experience to working with Eloquent Collections, but here, it's all entirely file-based. 
 You get the have access to all Laravel Collection methods so you are encouraged to read the  Laravel Collections documentation  for more information. 
 Currently only a Markdown collection type is added, but more types like YAML are planned. 
 High-Level Concept Overview 
 To make collections easy to use and understand, Hyde makes a few assumptions about the structure of your collections. Follow these conventions and creating dynamic static sites will be a breeze. 
 
 Collections are stored in the new  resources/collections  directory. 
 Each subdirectory in here can be a collection. 
 Data collections are automatically generated from the source files when you use the Facade you will learn about below. 
 When using one of the facades, you need to specify the collection name, this name is the name of the subdirectory. 
 Each subdirectory should probably only have the same filetype to prevent developer confusion, but this is not enforced. 
 Unlike Markdown pages, files starting with underscores are not ignored. 
 You can customize the source directory for collections through a service provider. 
 
 Markdown Collections - Hands on Guide 
 Setting up the file structure 
 I think the best way to explain DataCollections is through examples. Let's create a Blade page with customer testimonials. 
 We start by setting up our directory structure. We will create a  testimonials  subdirectory, which will be the collection name. 
 In it we will place Markdown files. Each file will be a testimonial. The Markdown will be parsed into a  MarkdownDocument  object which parses any optional YAML front matter. 
 Here is the sample Markdown we will use: 
  // filepath: resources/collections/testimonials/1.md
---
author: John Doe
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit...
  
 Let's take a look at our directory structure. I just copied the same file a few times. You can name the files anything you want, I kept it simple and just numbered them. 
  resources/collections
└── testimonials
    ├── 1.md
    ├── 2.md
    ├── 3.md
    ├── 4.md
    └── 5.md
  
 Using the Facade to Access the Collections 
 Now for the fun part! We will use the  MarkdownCollection  facade to access all our files into a convenient object. The class is registered with an alias, so you don't need to include any namespaces when in a Blade file. 
 The general syntax to use the facade is as follows: 
  MarkdownCollection::get('subdirectory_name')
  
 This will return a Hyde DataCollection object, containing our Markdown files as MarkdownDocument objects. Here is a quick look at the object the facade returns: 
   ^     Hyde\Framework\Features\DataCollections\DataCollection  { #270 ▼    &nbsp;&nbsp;+ key : " testimonials "  &nbsp;&nbsp;+ parseTimeInMs :  5.02   --> &nbsp;&nbsp;# items :  array:5  [ ▼    &nbsp;&nbsp;&nbsp;&nbsp; 0  =&gt;  &nbsp;&nbsp;" style="display: inline; color: rgb(18, 153, 218); "> Hyde\Framework\Models  \ MarkdownDocument  { #273 ▼    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ matter :  array:1  [ ▶ ]  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ body : " Lorem ipsum dolor sit amet, consectetur adipiscing elit... \n  "  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ title : ""  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ slug : ""  &nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;&nbsp;&nbsp;&nbsp; 1  =&gt;  &nbsp;&nbsp;" style="display: inline; color: rgb(18, 153, 218); "> Hyde\Framework\Models  \ MarkdownDocument  { #274 ▶ }  &nbsp;&nbsp;&nbsp;&nbsp; 2  =&gt;  &nbsp;&nbsp;" style="display: inline; color: rgb(18, 153, 218);"> Hyde\Framework\Models  \ MarkdownDocument  { #275 ▶ }  &nbsp;&nbsp;&nbsp;&nbsp; [The rest is truncated to conserve space...]   &nbsp;&nbsp; ]  &nbsp;&nbsp;# escapeWhenCastingToString :  false     }-->  
 Implementing it in a Blade view 
 Let's create a Blade page to display all our testimonials. 
  php hyde make:page &quot;Testimonials&quot; --type=&quot;blade&quot;
# or just touch _pages/testimonials.blade.php
  
 And we can use the collection almost like any other Laravel one. As you can see, we are able to get the author from the front matter, and the content from the body. 
  @foreach(MarkdownCollection::get('testimonials') as $testimonial)
&lt;blockquote&gt;
	&lt;p&gt;{{ $testimonial-&gt;body }}&lt;/p&gt;
	&lt;small&gt;{{ $testimonial-&gt;matter['author'] }}&lt;/small&gt;
&lt;/blockquote&gt;
@endforeach
  
